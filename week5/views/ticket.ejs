<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.1.9/p5.js"></script>
    
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.1.9/addons/p5.sound.min.js"></script> -->
   <!--  <style>
    html, body {
        margin: 0;
        padding: 0;
      }
      canvas {
        display: block;
      }
    </style> -->
    <title>Your Ticket</title>
</head>
<body>
    <h3>Here is the ticket!</h3>
    <div id="sketch-holder">
        
    </div>
    
    <script>
        <% var index= data.length-1; %>
        console.log("<%= data[index].message %>");
        var midPointLat=0.5*(parseFloat(<%= data[index].desLat %>)+parseFloat(<%= data[index].locLat %>));
        var latcos=Math.cos(midPointLat*Math.PI/180);
        console.log(latcos+" cos value");
        var directDist=Math.abs(parseFloat(<%= data[index].desLng %>)-parseFloat(<%= data[index].locLng %>))+Math.abs(parseFloat(<%= data[index].desLat %>)-parseFloat(<%= data[index].locLat %>));
        console.log(directDist);
        var distance = latcos*directDist*111;
        var loc={lat:parseFloat(<%= data[index].locLat %>),lng:parseFloat(<%= data[index].locLng %>)};
        var des={lat:parseFloat(<%= data[index].desLat %>),lng:parseFloat(<%= data[index].desLng %>)};
        
        var way=[];
        var n=2;
        for (let i=0;i<n;i++){
            var nowPos={lat:(loc.lat*(n-i)+des.lat*i)/n,lng:(loc.lng*(n-i)+des.lng*i)/n};

            way[i]=nowPos;
        }
        way[n]=des;
        let intWay=[];
        for (let i=0;i<n+1;i++){
            intWay[i]={
                lat: way[i].lat,
                lng: (way[i].lng+360)%360
            }
        }
        console.log("qiuzheng",intWay);
        console.log(distance+"km");
        let locations=[];
        let i=0;
        var finished=false;
        function initMap(){
            const geocoder = new google.maps.Geocoder();
            const timer = ms => new Promise(res => setTimeout(res,ms))
            async function load () { // We need to wrap the loop into an async function for this to work
                for (var i = 0; i < n+1; i++) {
                    locations[i]="non-human area";
                    geocoder.geocode({ location: intWay[i] }, (results, status) => {
                        if (status === "OK") {
                            if (results[0]) {
                                console.log(results[0]);
                                
                                locations[i]=getName(results[0]);
                            }
                            else{
                                console.log("no result");
                            }
                        }
                        else{
                            console.log(status);
                        }
                    })
                    await timer(500); // then the created Promise can be awaited
                }
                console.log(locations);
                finished=true;
            }
            load();
            
            
        }
        
        function getName(results){
            let countryResults=results.address_components.find(el => el.types.includes("country"));
            let cityResults=results.address_components.find(el => el.types.includes("administrative_area_level_1"));
            if (countryResults&&cityResults){
                return cityResults.long_name+', '+countryResults.long_name;
            }
            else{
                if (countryResults){
                    return countryResults.long_name;
                }
                else{
                    if (cityResults){
                        return cityResults.long_name;
                    }
                    else{
                        return results.formatted_address;
                    }

                }
            }
        }
        var months = new Array();
        months[0] = "Jan";
        months[1] = "Feb";
        months[2] = "Mar";
        months[3] = "Apr";
        months[4] = "May";
        months[5] = "Jun";
        months[6] = "Jul";
        months[7] = "Aug";
        months[8] = "Sep";
        months[9] = "Oct";
        months[10] = "Nov";
        months[11] = "Dec";
        let w=700;
        let h=200;
        let speed=20;
        function setup(){
            var canvas=createCanvas(w, h*n);
            canvas.parent("sketch-holder");
        }
        var drawn=false;
        function draw() {
            if (finished){
                if (drawn){
                    noLoop();
                }
                background(255);
                var d = new Date();
                for (let j=0;j<n;j++){
                    strokeWeight(3);
                    stroke(0);
                    rect(0,j*h,w,h-20);
                    noStroke();
                    textAlign(CENTER,CENTER);
                    textSize(10);
                    text(months[d.getMonth()]+" "+d.getDate().toString()+" "+d.getUTCFullYear().toString(),w*0.25,0.2*h+j*h);
                    textSize(20);
                    text(d.getHours().toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false}).toString()+" : "+d.getMinutes().toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false}).toString(),w*0.25,0.3*h+j*h);
                    textSize(10);
                    text("FROM",w*0.25,0.4*h+j*h);
                    textSize(20);
                    text(locations[j],w*0.25,0.55*h+j*h);
                    textSize(10);
                    let duration=distance/speed/n;
                    d.setHours(d.getHours() + duration);
                    text(months[d.getMonth()]+" "+d.getDate().toString()+" "+d.getUTCFullYear().toString(),w*0.75,0.2*h+j*h);
                    textSize(20);
                    text(d.getHours().toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false}).toString()+" : "+d.getMinutes().toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false}).toString(),w*0.75,0.3*h+j*h);
                    textSize(10);
                    text("TO",w*0.75,0.4*h+j*h);
                    textSize(20);
                    text(locations[j+1],w*0.75,0.55*h+j*h);
                }
                drawn=true;
                
            }
            
        }
    </script>
    
    <div> I ordered the ticket from whales, seagulls and pigeons. They say that they are willing to carry me.</div>
    <script async
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB7JT3LEvO3r8DjoMe4D6komSKGXHTpTIM&language=en&callback=initMap">
    </script>
    <h3>We want to travel because:</h3>
    <% 
        if (data.length>0){
            for (var k=0; k<data.length ; k++){
    %>
                <div id="data<%= k %>" > <%= data[k].message %>  </div>
    <% 		
            }
        }
    %>
    
</body>
</html>